environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\ascar\\AppData\\Roaming', 'CHOCOLATEYINSTALL': 'C:\\ProgramData\\chocolatey', 'CHOCOLATEYLASTPATHUPDATE': '132669330319293103', 'CHROME_CRASHPAD_PIPE_NAME': '\\\\.\\pipe\\crashpad_16804_DAIZSPVNKBJBTNNQ', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'LAPTOP-V3U3CPBG', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'DOTNET': 'C:\\Program Files\\ dotnet\\dotnet.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'GIT_INSTALL_ROOT': 'C:\\Users\\ascar\\scoop\\apps\\git\\current', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\ascar', 'LOCALAPPDATA': 'C:\\Users\\ascar\\AppData\\Local', 'LOGONSERVER': '\\\\LAPTOP-V3U3CPBG', 'NUMBER_OF_PROCESSORS': '8', 'ONEDRIVE': 'C:\\Users\\ascar\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\ascar\\OneDrive', 'ONLINESERVICES': 'Online Services', 'ORIGINAL_XDG_CURRENT_DESKTOP': 'undefined', 'OS': 'Windows_NT', 'PATH': 'C:\\Program Files (x86)\\VMware\\VMware Workstation\\bin\\;C:\\MinGW\\bin;C:\\windows\\system32;C:\\Program Files\\Oracle\\VirtualBox;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Users\\ascar\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\Scripts\\;C:\\Users\\ascar\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs;C:\\Program Files\\dotnet;C:\\Program Files\\dotnet\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\;C:\\Program Files\\Git\\cmd;C:\\TDM-GCC-64\\bin;C:\\ProgramData\\chocolatey\\bin;C:\\HashiCorp\\Vagrant\\bin;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Users\\ascar\\scoop\\shims;C:\\Users\\ascar\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\PyCharm 2020.3\\bin;;C:\\Users\\ascar\\.dotnet\\tools;C:\\Users\\ascar\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\ascar\\AppData\\Roaming\\npm;C:\\Program Files\\qemu;', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PLATFORMCODE': 'KV', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 126 Stepping 5, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '7e05', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '$P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'PYCHARM': 'C:\\Program Files\\JetBrains\\PyCharm 2020.3\\bin;', 'QEMU': 'C:\\Program Files\\qemu', 'REGIONCODE': 'EMEA', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\ascar\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\ascar\\AppData\\Local\\Temp', 'USERDOMAIN': 'LAPTOP-V3U3CPBG', 'USERDOMAIN_ROAMINGPROFILE': 'LAPTOP-V3U3CPBG', 'USERNAME': 'ascar', 'USERPROFILE': 'C:\\Users\\ascar', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'WINDIR': 'C:\\WINDOWS', 'ZES_ENABLE_SYSMAN': '1', 'TERM_PROGRAM': 'vscode', 'TERM_PROGRAM_VERSION': '1.64.2', 'LANG': 'en_US.UTF-8', 'COLORTERM': 'truecolor', 'VSCODE_GIT_IPC_HANDLE': '\\\\.\\pipe\\vscode-git-f8702043ce-sock', 'GIT_ASKPASS': 'c:\\Users\\ascar\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass.sh', 'VSCODE_GIT_ASKPASS_NODE': 'C:\\Users\\ascar\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '--ms-enable-electron-run-as-node', 'VSCODE_GIT_ASKPASS_MAIN': 'c:\\Users\\ascar\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass-main.js', 'PYTHONUSERBASE': 'C:\\Users\\ascar\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages'})